"""init

Revision ID: e1c11e1be343
Revises: 
Create Date: 2025-05-25 19:38:28.004699

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e1c11e1be343'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('abilities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('effect', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('moves',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('power', sa.Integer(), nullable=True),
    sa.Column('accuracy', sa.Integer(), nullable=True),
    sa.Column('pp', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('tournaments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('bracket_info', sa.JSON(), nullable=True),
    sa.Column('participants', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('upcoming', 'ongoing', 'completed', name='tournamentstatus'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('units',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('species_id', sa.Integer(), nullable=False),
    sa.Column('form_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('species', sa.String(), nullable=False),
    sa.Column('asset_folder', sa.String(), nullable=False),
    sa.Column('types', sa.JSON(), nullable=False),
    sa.Column('base_stats', sa.JSON(), nullable=False),
    sa.Column('move_ids', sa.JSON(), nullable=False),
    sa.Column('ability_ids', sa.JSON(), nullable=False),
    sa.Column('cost', sa.Integer(), nullable=True),
    sa.Column('evolution_cost', sa.JSON(), nullable=True),
    sa.Column('evolves_into', sa.JSON(), nullable=True),
    sa.Column('is_legendary', sa.Boolean(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('avatar', sa.String(), nullable=True),
    sa.Column('elo', sa.Integer(), nullable=True),
    sa.Column('currency', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('friends',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('friend_user_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'accepted', name='friendstatus'), nullable=True),
    sa.ForeignKeyConstraint(['friend_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('maps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=True),
    sa.Column('is_official', sa.Boolean(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('tileset_names', sa.JSON(), nullable=False),
    sa.Column('tile_data', sa.JSON(), nullable=False),
    sa.Column('allowed_modes', sa.JSON(), nullable=False),
    sa.Column('allowed_player_counts', sa.JSON(), nullable=False),
    sa.Column('preview_image', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_units',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('loadout_info', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('games',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_name', sa.String(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.Column('map_name', sa.String(), nullable=False),
    sa.Column('max_players', sa.Integer(), nullable=True),
    sa.Column('gamemode', sa.Enum('conquest', 'war', 'capture_the_flag', name='gamemode'), nullable=False),
    sa.Column('starting_cash', sa.Integer(), nullable=True),
    sa.Column('cash_per_turn', sa.Integer(), nullable=True),
    sa.Column('max_turns', sa.Integer(), nullable=True),
    sa.Column('unit_limit', sa.Integer(), nullable=True),
    sa.Column('is_private', sa.Boolean(), nullable=True),
    sa.Column('host_id', sa.Integer(), nullable=True),
    sa.Column('link', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['host_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['map_id'], ['maps.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('link')
    )
    op.create_table('game_players',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('cash_remaining', sa.Integer(), nullable=True),
    sa.Column('game_units', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game_status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.Column('current_turn', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('open', 'closed', 'preparation', 'in_progress', 'completed', name='gamestatus'), nullable=False),
    sa.Column('players', sa.JSON(), nullable=False),
    sa.Column('winner_id', sa.Integer(), nullable=True),
    sa.Column('replay_log', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['winner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('game_id')
    )
    op.create_table('game_units',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('x', sa.Integer(), nullable=False),
    sa.Column('y', sa.Integer(), nullable=False),
    sa.Column('current_hp', sa.Integer(), nullable=False),
    sa.Column('stat_boosts', sa.JSON(), nullable=True),
    sa.Column('status_effects', sa.JSON(), nullable=True),
    sa.Column('fainted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('game_units')
    op.drop_table('game_status')
    op.drop_table('game_players')
    op.drop_table('games')
    op.drop_table('user_units')
    op.drop_table('maps')
    op.drop_table('friends')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('units')
    op.drop_table('tournaments')
    op.drop_table('moves')
    op.drop_table('abilities')
    # ### end Alembic commands ###
